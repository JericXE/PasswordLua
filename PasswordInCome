--=============================--
--       Configuration         --
--=============================--

local folderPath = "/storage/emulated/0/"
local filePath = folderPath .. "/a.txt"
local expiryDuration = 6 * 60 * 60 -- 6 hours

local Passkey1 = "MainUpdate_Later"
local Passkey2 = "Second_Update"
local Passkey3 = "Final_Access"

local keyLinks = {
    [1] = "https://link-hub.net/167243/passkey-11",
    [2] = "https://link-hub.net/167243/passkey-111",
    [3] = "https://link-hub.net/167243/passkey-113",
}

--=============================--
--      Utility Functions      --
--=============================--

function readSavedKeys()
    local keys = {}
    local f = io.open(filePath, "r")
    if not f then return keys end

    for line in f:lines() do
        local k, v = line:match("Passkey(%d):%s*(.+)")
        if k and v then
            keys[tonumber(k)] = v
        end
    end
    f:close()
    return keys
end

function saveKey(step, value)
    local saved = readSavedKeys()
    saved[step] = value
    local expiry = os.time() + expiryDuration

    local f = io.open(filePath, "w")
    if f then
        for i = 1, 3 do
            if saved[i] then
                f:write("Passkey" .. i .. ": " .. saved[i] .. "\n")
            end
        end
        f:write("Expiry: " .. expiry .. "\n")
        f:close()
    else
        gg.alert("‚ùå [ FILE ERROR ] ‚ùå\n\nUnable to write password file!\nüìÑ Path:\n" .. filePath)
    end
end

--=============================--
--         Key Prompt          --
--=============================--

function askKey(step)
    local correctKeys = {Passkey1, Passkey2, Passkey3}
    local link = keyLinks[step]

    while true do
        local input = gg.prompt(
            {"Enter Key:", "Get Key"},
            {"", false},
            {"text", "checkbox"}
        )

        if not input then
            gg.toast("‚ùå Cancelled. Exiting script.")
            os.exit()
        end

        local entered = input[1]
        local getKey = input[2]

        if getKey then
            gg.copyText(link)
            gg.toast("üìã Link copied. Please get your key.")
        elseif entered == correctKeys[step] then
            gg.toast("‚úÖ Key " .. step .. " correct.")
            saveKey(step, entered)
            return entered
        else
            gg.alert("key verification failed please get key again:\n\n" .. link)
        end
    end
end

--=============================--
--          Main Flow          --
--=============================--

function startKeySequence()
    local enteredKeys = readSavedKeys()
    local correctKeys = {Passkey1, Passkey2, Passkey3}

    for step = 1, 3 do
        if enteredKeys[step] == correctKeys[step] then
            gg.toast("‚úÖ Key " .. step .. " already valid. Skipping...")
        else
            askKey(step)
        end
    end

    gg.toast("üéâ All keys validated! Access granted.")
end

startKeySequence()
